// This file is part of Webina, released under the Apache 2.0 License. See
// LICENSE.md or go to https://opensource.org/licenses/Apache-2.0 for full
// details. Copyright 2023 Jacob D. Durrant.


import * as Utils from "../../Utils";
import { store } from "../../Vue/Store";
import * as Webina from "../../Webina/Webina";
import {
    Button,
    FileUpload,
    Icon

} from '@adobe/coral-spectrum';

const button = new Button();
const icon = new Icon();



const fileUpload = new FileUpload();
// Esperar a que el DOM esté completamente cargado
document.addEventListener('DOMContentLoaded', () => {
    // Obtener la referencia al componente FileUpload
    const fileUpload = document.querySelector('coral-fileupload') as FileUpload;
    const button = document.querySelector('coral-button');
    const icon = document.querySelector('coral-icon');

    
    if (fileUpload) {
        // Configurar propiedades adicionales si es necesario
        fileUpload.accept = '.pdbqt, .pdb, .ent, .xyz, .pqr, .mcif, .mmcif';
        fileUpload.multiple = false;
        const selectButton = fileUpload.querySelector('coral-fileupload-select');

        if (selectButton) {
            // Establecer el color de fondo del botón
            selectButton.style.backgroundColor = '#2d878f';
        }
    }
    // Aplicar el color de fondo a cada botón
    const buttons = document.querySelectorAll('button');
    buttons.forEach((btn) => {
        (btn as HTMLElement).style.backgroundColor = '#2d878f';
    });
      
});
const fileInput = document.getElementById('fileInput') as HTMLInputElement | null;
const textInput = document.getElementById('textInput') as HTMLInputElement | null;

if (fileInput && textInput) {
    fileInput.addEventListener('change', function(event) {
        const target = event.target as HTMLInputElement;
        if (target.files && target.files.length > 0) {
            textInput.value = target.files[0].name;
        }
    });
}

declare let Vue: any;
declare let jQuery: any;
// declare let Webina;


/** An object containing the vue-component computed functions. */
let computedFunctions = {
    /**
     * Whether to hide the vina docking-box parameters.
     * @returns boolean  True if they should be hidden, false otherwise.
     */
    "hideDockingBoxParams"(): boolean {
        return store.state.hideDockingBoxParams;
    },

    /** Whether to show the keep-protein-only link. Has both a getter and a setter. */
    "showKeepProteinOnlyLink": {
        get(): number {
            return store.state["showKeepProteinOnlyLink"];
        },

        set(val: number): void {
            store.commit("setVar", {
                name: "showKeepProteinOnlyLink",
                val: val
            });
        }
    },
}

/** An object containing the vue-component methods functions. */
let methodsFunctions = {
    /**
     * Runs when user indicates theye want to use example vina input files,
     * rather than provide their own.
     * @returns void
     */
    "useExampleVinaInputFiles"(): void {
        this["showFileInputs"] = false;

        setTimeout(() => {  // Vue.nextTick doesn't work...
            // Update some values.
            store.commit("setVar", {
                name: "receptorContents",
                val: store.state["receptorContentsExample"]
            });

            store.commit("setVar", {
                name: "ligandContents",
                val: store.state["ligandContentsExample"]
            });
            store.commit("setVar", {
                name: "crystalContents",
                val: store.state["crystalContentsExample"]
            });
            store.commit("setVinaParam", {
                name: "center_x",
                val: 41.03
            });
            store.commit("setVinaParam", {
                name: "center_y",
                val: 18.98
            });
            store.commit("setVinaParam", {
                name: "center_z",
                val: 14.03
            });
            store.commit("setVinaParam", {
                name: "size_x",
                val: 20.00
            });
            store.commit("setVinaParam", {
                name: "size_y",
                val: 20.00
            });
            store.commit("setVinaParam", {
                name: "size_z",
                val: 20.00
            });

            // Also update file names so example vina command line is valid.
            store.commit("updateFileName", { type: "ligand", filename: "ligand_example.pdbqt" });
            store.commit("updateFileName", { type: "receptor", filename: "receptor_example.pdbqt" });

            // These values should now validate.
            let validateVars = [
                "receptor", "ligand", "center_x", "center_y", "center_z",
                "size_x", "size_y", "size_z"
            ];
            const validateVarsLen = validateVars.length;
            for (let i = 0; i < validateVarsLen; i++) {
                const validateVar = validateVars[i];
                store.commit("setValidationParam", {
                    name: validateVar,
                    val: true
                });
            }
        }, 100);
    },

    /**
     * Runs when the user presses the submit button.
     * @returns void
     */
    "onSubmitClick"(): void {
        if (this["validate"]() === true) {
            store.commit("disableTabs", {
                "parametersTabDisabled": true,
                "existingVinaOutputTabDisabled": true,
                "runningTabDisabled": false,
            });

            jQuery("body").addClass("waiting");

            Vue.nextTick(() => {
                store.commit("setVar", {
                    name: "tabIdx",
                    val: 2
                });

                Vue.nextTick(() => {
                    // setTimeout(() => {
                    //     this.afterWASM(this["testVinaOut"], this["testStdOut"]);
                    // }, 1000);

                    // Keep track of start time
                    store.commit("setVar", {
                        name: "time",
                        val: new Date().getTime()
                    });

                    Webina.start(
                        store.state["vinaParams"],
                        store.state["receptorContents"],
                        store.state["ligandContents"],

                        // onDone
                        (outPdbqtFileTxt: string, stdOut: string, stdErr: string) => {
                            store.commit("setVar", {
                                name: "time",
                                val: Math.round((new Date().getTime() - store.state["time"]) / 100) / 10
                            });

                            this.afterWASM(outPdbqtFileTxt, stdOut, stdErr);
                        },

                        // onError
                        (errObj: any) => {
                            // Disable some tabs
                            store.commit("disableTabs", {
                                "parametersTabDisabled": true,
                                "existingVinaOutputTabDisabled": true,
                                "runningTabDisabled": true,
                                "outputTabDisabled": true,
                                "startOverTabDisabled": false
                            });

                            this.showWebinaError(errObj["message"]);
                        },
                        Utils.curPath() + "Webina/"
                    )
                });
            });
        }
    },

    /**
     * Opens the draw ligand modal.
     * @param  {*} e  A click event so you can stop the propagation.
     * @returns void
     */
    "onDrawLigClick"(e: any): void {
        store.commit("drawSmilesModal");
        e.preventDefault();
        e.stopPropagation();
    },

    /**
     * Removes residues from protein model that are not protein amino acids.
     * @param  {any} e  The click event.
     * @returns void
     */
    "onShowKeepProteinOnlyClick"(e: any): void {
        let linesToKeep = Utils.keepOnlyProteinAtoms(store.state["receptorContents"]);

        store.commit("setVar", {
            name: "receptorContents",
            val: linesToKeep
        });

        store.commit("updateFileName", {
            type: "receptor",
            filename: Utils.replaceExt(
                store.state["receptorFileName"],
                "protein.pdbqt"
            )
        });

        this["showKeepProteinOnlyLink"] = false;

        e.preventDefault();
        e.stopPropagation();
    },

    /**
     * Determines whether all form values are valid.
     * @param  {boolean=true} modalWarning  Whether to show a modal if
     *                                      they are not valid.
     * @returns boolean  True if they are valid, false otherwise.
     */
    "validate"(modalWarning: boolean=true): boolean {
        let validations = store.state["validation"];

        let pass = true;

        const paramName = Object.keys(validations);
        const paramNameLen = paramName.length;
        let badParams: string[] = [];
        for (let i = 0; i < paramNameLen; i++) {
            const name = paramName[i];

            if (name === "output") {
                // This one isn't part of the validation.
                continue;
            }

            const valid = validations[name];
            if (valid === false) {
                pass = false;
                badParams.push(name);
            }
        }

        if (pass === false) {
            if (modalWarning === true) {
                store.commit("openModal", {
                    title: "Parámetros inválidos!",
                    body: "<p>Por favor corriga el(los) siguiente(s) parámetro(s) antes de continuar: <code>" + badParams.join(" ") + "</code></p>"
                });
            }
        }

        store.commit("setVar", {
            name: "vinaParamsValidates",
            val: pass
        })

        return pass;
    },

    /**
     * Runs after the Vina WASM file is complete.
     * @param  {string} outPdbqtFileTxt  The contents of the Vina output pdbqt file.
     * @param  {string} stdOut           The contents of the Vina standard output.
     * @param  {string} stdErr           The contents of the Vina standard error.
     * @returns void
     */
    afterWASM(outPdbqtFileTxt: string, stdOut: string, stdErr: string): void {
        // Disable some tabs
        store.commit("disableTabs", {
            "parametersTabDisabled": true,
            "existingVinaOutputTabDisabled": true,
            "runningTabDisabled": true,
            "outputTabDisabled": false,
            "startOverTabDisabled": false
        });

        // Switch to output tab.
        store.commit("setVar", {
            name: "tabIdx",
            val: 3
        });

        store.commit("setVar", {
            name: "stdOut",
            val: stdOut
        });
        store.commit("setVar", {
            name: "outputContents",
            val: outPdbqtFileTxt
        });

        if (stdErr !== "") {
            this.showWebinaError(stdErr);
        }

        // Process the standard output (extract scores and rmsds) and
        // frames.
        store.commit("outputToData");

        jQuery("body").removeClass("waiting");
    },

    /**
     * Shows a Webina error.
     * @param  {string} message  The error message.
     * @returns void
     */
    showWebinaError(message: string): void {
        store.commit("openModal", {
            title: "Error de Vina!",
            body: "<p>Vina retornó el siguiente error: <code>" + message + "</code></p>"
        });
    }
}

/**
 * The vue-component mounted function.
 * @returns void
 */
function mountedFunction(): void {
    // @ts-ignore
    this["webAssemblyAvaialble"] = Utils.webAssemblySupported();
}

//esto lo dejare por aca para el tema de dibujar
//<--!<template v-slot:extraDescription>o <a href='' @click="onDrawLigClick($event);">dibuja tu ligando</a>. Recomendamos preparar tus archivos de ligando de forma separada con <a target='_blank' href='https://git.durrantlab.pitt.edu/jdurrant/gypsum_dl'>Gypsum-DL</a>.</template> -->


//boton de archivos de prueba
//<form-button @click.native="useExampleVinaInputFiles" cls="float-right">Usar Archivos de Prueba</form-button>  <!-- variant="default" -->

/**
 * Setup the vina-params Vue commponent.
 * @returns void
 */
export function setup(): void {
    Vue.component('vina-params', {
        "template": `
            <div>
                <b-form v-if="webAssemblyAvaialble">
                    <sub-section title="Archivos de Entrada (PDBQT)" v-if="showFileInputs">
                        <div class="custom-spectrum-button-group">
                        </span>
                        <file-input
                            label="Receptor"
                            id="receptor"
                            description="Formatos: PDBQT (mejor opción), PDB, ENT, XYZ, PQR, MCIF, MMCIF. Si es PDB, asegúrate de agregar átomos de hidrógeno polares."
                            accept=".pdbqt"
                            convert=".pdb, .ent, .xyz, .pqr, .mcif, .mmcif"
                            :class="'custom-spectrum-file-input'"
                        >
                            <template v-slot:extraDescription>
                            <span v-if="showKeepProteinOnlyLink">
                                <a href="" @click="onShowKeepProteinOnlyClick($event);">¿Remover automáticamente todos los átomos que no sean proteínas?</a>
                            </span>
                            <span v-else>
                                <b>(¡Se removieron todos los átomos no proteicos!)</b>
                            </span>
+
                            </template>
                        </file-input>

                        <file-input
                            label="Ligando"
                            id="ligand"
                            description="Formatos: PDBQT (mejor opción), CAN, MDL, MOL, MOL2, PDB, SD, SDF, SMI, SMILES, XYZ"
                            accept=".pdbqt"
                            convert=".can, .mdl, .mol, .mol2, .pdb, .sd, .sdf, .smi, .smiles, .xyz"
                            :class="'custom-spectrum-file-input'"
                        ></file-input>

                        <file-input
                            label="Pose Correcta"
                            id="crystal"
                            :required="false"
                            description="La pose correcta del ligando, si es que es conocida a partir de un experimento. Este archivo PDBQT o PDB es opcional."
                            accept=".pdbqt, .pdb"
                            :class="'custom-spectrum-file-input'"
                        ></file-input>
                        </div>
                    </sub-section>

                    <sub-section title="Grilla de Docking">
                        <form-group
                            label=""
                            id="input-group-receptor-3dmol"
                            description=""
                        >
                            <div class="bv-example-row container-fluid">
                                <b-row>
                                    <b-col style="padding-left: 0; padding-right: 10px;">
                                        <threedmol type="receptor"></threedmol>
                                    </b-col>
                                    <b-col style="padding-right: 0; padding-left: 10px;">
                                        <threedmol type="ligand"></threedmol>
                                    </b-col>
                                </b-row>
                            </div>
                        </form-group>

                        <triple-numeric-input
                            :hide="hideDockingBoxParams"
                            label="Centro de Grilla"
                            id1="center_x"
                            id2="center_y"
                            id3="center_z"
                            description="Coordenadas X, Y y Z del centro de la grilla de docking."
                        ></triple-numeric-input>

                        <triple-numeric-input
                            :hide="hideDockingBoxParams"
                            label="Tamaño de Grilla"
                            id1="size_x"
                            id2="size_y"
                            id3="size_z"
                            description="Tamaño de la grilla de docking en las dimensiones X, Y y Z (Angstroms)."
                            :min="0"
                        ></triple-numeric-input>
                    </sub-section>

                    <sub-section title="Otros Parámetros Críticos">
                        <numeric-input
                            label="CPU(s)" id="cpu"
                            description="El número de CPUs a utilizar (No olvide dejar algunas CPUs sin utilzar para el funcionamiento del computador)."
                            placeholder="${navigator.hardwareConcurrency <= 2 ? 1 : 2}"
                            :default="${navigator.hardwareConcurrency <= 2 ? 1 : 2}"
                            :min="1"
                            :max="${navigator.hardwareConcurrency == 1 ? 1 : navigator.hardwareConcurrency - 1}"
                        ></numeric-input>

                        <numeric-input
                            label="Exhaustividad" id="exhaustiveness"
                            description="Exhaustividad de la búsqueda global (aproximadamente proporcional al tiempo). El valor predeterminado de Vina es 8, pero puede resultar más lento. Usa 8 cuando la precisión sea crítica."
                            placeholder="8"
                            :default="8"
                            :min="1"
                        ></numeric-input>
                    </sub-section>

                    <sub-section title="Parámetros">
                        <div role="tablist">
                            <b-card no-body class="mb-1">
                                <b-card-header header-tag="header" class="p-1 mx-4" role="tab">
                                    <b-button block  href="#" v-b-toggle.accordion-2 variant="default">Parámetros de Salida (Opcional)</b-button>
                                </b-card-header>
                                <b-collapse id="accordion-2" role="tabpanel">
                                    <b-card-body>
                                        <b-card
                                            class="mb-2 text-center"
                                            style="margin-bottom:1.4rem !important;"
                                        >
                                            <b-card-text>
                                                Parámetros opcionales para controlar el resultado.
                                            </b-card-text>
                                        </b-card>

                                        <check-box
                                            label="Realizar únicamente una búsqueda local." id="local_only"
                                        ></check-box>
                                        <check-box
                                            label="Sólo puntaje, sin docking. El centro y tamaño de la grilla de docking serán ignorados."
                                            id="score_only"
                                        ></check-box>
                                        <check-box
                                            label="Entrada aleatoria, intentando evitar conflictos."
                                            id="randomize_only"
                                        ></check-box>
                                    </b-card-body>
                                </b-collapse>
                            </b-card>



                            <!-- Parametros avanzados comentados -->
                            
                            <b-card no-body class="mb-1">
                                <b-card-header header-tag="header" class="p-1 mx-4" role="tab">
                                    <b-button block href="#" v-b-toggle.accordion-3 variant="default">Parametros Avanzados</b-button>
                                </b-card-header>
                                <b-collapse id="accordion-3" role="tabpanel">
                                    <b-card-body>
                                        <b-card
                                            class="mb-2 text-center"
                                            style="margin-bottom:1.4rem !important;"
                                        >
                                            <b-card-text>
                                                Parámetros avanzados
                                            </b-card-text>
                                        </b-card>
                                        <numeric-input
                                            label="Semilla Aleatoria" id="seed"
                                            description="La semilla aleatoria explícita."
                                            placeholder="${new Date().getTime()}"
                                            :min="1"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Número de Modos" id="num_modes"
                                            description="Máximo número de modos de enlace a generar."
                                            placeholder="9"
                                            :min="1"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Rango de Energía" id="energy_range"
                                            description="Diferencia máxima de energía entre el mejor modo de enlace y el peor mostrado (kcal/mol)."
                                            placeholder="3"
                                            :min="0"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Peso Gauss 1" id="weight_gauss1"
                                            description="Término del peso de Gauss 1."
                                            placeholder="-0.035579"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Peso Gauss 2" id="weight_gauss2"
                                            description="Término del peso de Gauss 2."
                                            placeholder="-0.005156"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Peso de Repulsión"
                                            id="weight_repulsion"
                                            description="Término del peso de repulsión."
                                            placeholder="0.84024500000000002"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Peso Hidrofóbico"
                                            id="weight_hydrophobic"
                                            description="Término del peso hidrofóbico."
                                            placeholder="-0.035069000000000003"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Peso Hidrógeno"
                                            id="weight_hydrogen"
                                            description="Término del peso de enlace de hidrógeno."
                                            placeholder="-0.58743900000000004"
                                        ></numeric-input>

                                        <numeric-input
                                            label="Peso Rot" id="weight_rot"
                                            description="Término del peso de N_rot."
                                            placeholder="0.058459999999999998"
                                        ></numeric-input>
                                    </b-card-body>
                                </b-collapse>
                            </b-card>
                            



                        </div>
                    </sub-section>

                    <span style="display:none;">{{validate(false)}}</span>  <!-- Hackish. Just to make reactive. -->
                    <div class="card w-full mb-4 mx-5">
                        <form-button @click.native="onSubmitClick" variant="primary" cls="">Ejecutar Docking</form-button>
                    </div>

                </b-form>
                <div v-else>
                    <p>Desafortunadamente, la aplicación no soporta WebAssembly (necesario para el cálculo de acoples).</p>

                    <p>Aún puedes utilizar la opción de ingresar archivos pre-calculados en la ventana 
                    "Resultados de Vina Existentes", ya que no requiere el uso de WebAssembly.</p>
                </div>
            </div>
        `,
        "props": {},
        "computed": computedFunctions,

        /**
         * Get the data associated with this component.
         * @returns any  The data.
         */
        "data"() {
            return {
                "showFileInputs": true,
                "webAssemblyAvaialble": true
            }
        },
        "methods": methodsFunctions,

        /**
         * Runs when the vue component is mounted.
         * @returns void
         */
        "mounted": mountedFunction
    })
}

